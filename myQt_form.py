# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Qt5Project/Windows.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(816, 734)
        MainWindow.setAcceptDrops(True)
        MainWindow.setWindowTitle("DES.LM.Reporter")
        MainWindow.setStatusTip("")
        MainWindow.setWhatsThis("")
        MainWindow.setAccessibleName("")
        MainWindow.setAccessibleDescription("")
        MainWindow.setAutoFillBackground(False)
        MainWindow.setWindowFilePath("")
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        MainWindow.setAnimated(False)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(5, 5, 5, 5)
        self.gridLayout.setObjectName("gridLayout")
        self.VerticalSplitter = QtWidgets.QSplitter(self.centralwidget)
        self.VerticalSplitter.setToolTip("")
        self.VerticalSplitter.setStatusTip("")
        self.VerticalSplitter.setWhatsThis("")
        self.VerticalSplitter.setOrientation(QtCore.Qt.Horizontal)
        self.VerticalSplitter.setObjectName("VerticalSplitter")
        self.layoutWidget = QtWidgets.QWidget(self.VerticalSplitter)
        self.layoutWidget.setObjectName("layoutWidget")
        self.leftBox = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.leftBox.setContentsMargins(0, 0, 0, 0)
        self.leftBox.setObjectName("leftBox")
        self.HorisontalSplitter = QtWidgets.QSplitter(self.layoutWidget)
        self.HorisontalSplitter.setOrientation(QtCore.Qt.Vertical)
        self.HorisontalSplitter.setObjectName("HorisontalSplitter")
        self.layoutWidget1 = QtWidgets.QWidget(self.HorisontalSplitter)
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.topBox = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.topBox.setContentsMargins(0, 0, 0, 0)
        self.topBox.setSpacing(1)
        self.topBox.setObjectName("topBox")
        self.labelReports = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelReports.setFont(font)
        self.labelReports.setStatusTip("")
        self.labelReports.setWhatsThis("")
        self.labelReports.setAccessibleName("")
        self.labelReports.setAccessibleDescription("")
        self.labelReports.setText("Список доступных шаблонов отчетов:")
        self.labelReports.setTextFormat(QtCore.Qt.AutoText)
        self.labelReports.setScaledContents(False)
        self.labelReports.setAlignment(QtCore.Qt.AlignCenter)
        self.labelReports.setWordWrap(False)
        self.labelReports.setObjectName("labelReports")
        self.topBox.addWidget(self.labelReports)
        self.listViewReports = QtWidgets.QListView(self.layoutWidget1)
        self.listViewReports.setMinimumSize(QtCore.QSize(200, 100))
        self.listViewReports.setToolTip("Список доступных шаблонов отчётов")
        self.listViewReports.setStatusTip("")
        self.listViewReports.setWhatsThis("")
        self.listViewReports.setStyleSheet("")
        self.listViewReports.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.listViewReports.setObjectName("listViewReports")
        self.topBox.addWidget(self.listViewReports)
        self.layoutWidget2 = QtWidgets.QWidget(self.HorisontalSplitter)
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.bottomBox = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.bottomBox.setContentsMargins(0, 0, 0, 0)
        self.bottomBox.setSpacing(1)
        self.bottomBox.setObjectName("bottomBox")
        self.labelRawData = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelRawData.setFont(font)
        self.labelRawData.setStatusTip("")
        self.labelRawData.setWhatsThis("")
        self.labelRawData.setAccessibleName("")
        self.labelRawData.setAccessibleDescription("")
        self.labelRawData.setText("Выгрузка данных из DES.LM:")
        self.labelRawData.setTextFormat(QtCore.Qt.AutoText)
        self.labelRawData.setScaledContents(False)
        self.labelRawData.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRawData.setWordWrap(False)
        self.labelRawData.setObjectName("labelRawData")
        self.bottomBox.addWidget(self.labelRawData)
        self.listViewRawData = QtWidgets.QListView(self.layoutWidget2)
        self.listViewRawData.setMinimumSize(QtCore.QSize(200, 100))
        self.listViewRawData.setToolTip("Список фалов с необработанными данными,\n"
"выгруженными из DES.LM")
        self.listViewRawData.setStatusTip("")
        self.listViewRawData.setWhatsThis("")
        self.listViewRawData.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.listViewRawData.setObjectName("listViewRawData")
        self.bottomBox.addWidget(self.listViewRawData)
        self.leftBox.addWidget(self.HorisontalSplitter)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.line_3 = QtWidgets.QFrame(self.layoutWidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout.addWidget(self.line_3)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStatusTip("")
        self.label.setWhatsThis("")
        self.label.setAccessibleName("")
        self.label.setAccessibleDescription("")
        self.label.setText("При обработке Drag&Drop:")
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(2)
        self.label_4.setFont(font)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.radioButtonDD1 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonDD1.setAccessibleName("")
        self.radioButtonDD1.setAccessibleDescription("")
        self.radioButtonDD1.setText("только копировать")
        self.radioButtonDD1.setChecked(True)
        self.radioButtonDD1.setObjectName("radioButtonDD1")
        self.verticalLayout.addWidget(self.radioButtonDD1)
        self.radioButtonDD2 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonDD2.setAccessibleName("")
        self.radioButtonDD2.setAccessibleDescription("")
        self.radioButtonDD2.setText("... и проверять структуру данных")
        self.radioButtonDD2.setObjectName("radioButtonDD2")
        self.verticalLayout.addWidget(self.radioButtonDD2)
        self.radioButtonDD3 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonDD3.setAccessibleName("")
        self.radioButtonDD3.setAccessibleDescription("")
        self.radioButtonDD3.setText("... и переименовывать результат")
        self.radioButtonDD3.setObjectName("radioButtonDD3")
        self.verticalLayout.addWidget(self.radioButtonDD3)
        self.radioButtonDD4 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonDD4.setAccessibleName("")
        self.radioButtonDD4.setAccessibleDescription("")
        self.radioButtonDD4.setText("... и переименовывать источник")
        self.radioButtonDD4.setObjectName("radioButtonDD4")
        self.verticalLayout.addWidget(self.radioButtonDD4)
        self.line_2 = QtWidgets.QFrame(self.layoutWidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout.addWidget(self.line_2)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStatusTip("")
        self.label_2.setWhatsThis("")
        self.label_2.setAccessibleName("")
        self.label_2.setAccessibleDescription("")
        self.label_2.setText("При формировании отчёта:")
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(2)
        self.label_3.setFont(font)
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.checkBoxDeleteVIP = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxDeleteVIP.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxDeleteVIP.sizePolicy().hasHeightForWidth())
        self.checkBoxDeleteVIP.setSizePolicy(sizePolicy)
        self.checkBoxDeleteVIP.setMaximumSize(QtCore.QSize(100, 16777215))
        self.checkBoxDeleteVIP.setText("Убрать VIP")
        self.checkBoxDeleteVIP.setChecked(True)
        self.checkBoxDeleteVIP.setObjectName("checkBoxDeleteVIP")
        self.horizontalLayout.addWidget(self.checkBoxDeleteVIP)
        self.checkBoxCurrMonthAHalf = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxCurrMonthAHalf.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxCurrMonthAHalf.sizePolicy().hasHeightForWidth())
        self.checkBoxCurrMonthAHalf.setSizePolicy(sizePolicy)
        self.checkBoxCurrMonthAHalf.setStatusTip("")
        self.checkBoxCurrMonthAHalf.setWhatsThis("")
        self.checkBoxCurrMonthAHalf.setAccessibleName("")
        self.checkBoxCurrMonthAHalf.setAccessibleDescription("")
        self.checkBoxCurrMonthAHalf.setText("Текущий месяц 50%")
        self.checkBoxCurrMonthAHalf.setChecked(True)
        self.checkBoxCurrMonthAHalf.setObjectName("checkBoxCurrMonthAHalf")
        self.horizontalLayout.addWidget(self.checkBoxCurrMonthAHalf)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.checkBoxDeleteNotProduct = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxDeleteNotProduct.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxDeleteNotProduct.sizePolicy().hasHeightForWidth())
        self.checkBoxDeleteNotProduct.setSizePolicy(sizePolicy)
        self.checkBoxDeleteNotProduct.setStatusTip("")
        self.checkBoxDeleteNotProduct.setWhatsThis("")
        self.checkBoxDeleteNotProduct.setAccessibleName("")
        self.checkBoxDeleteNotProduct.setAccessibleDescription("")
        self.checkBoxDeleteNotProduct.setText("Оставить только производство")
        self.checkBoxDeleteNotProduct.setChecked(True)
        self.checkBoxDeleteNotProduct.setObjectName("checkBoxDeleteNotProduct")
        self.verticalLayout.addWidget(self.checkBoxDeleteNotProduct)
        self.checkBoxAddProjectsWithAdd = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxAddProjectsWithAdd.setToolTip("")
        self.checkBoxAddProjectsWithAdd.setStatusTip("")
        self.checkBoxAddProjectsWithAdd.setText("Учесть все проекты из файла с доп.информацией")
        self.checkBoxAddProjectsWithAdd.setObjectName("checkBoxAddProjectsWithAdd")
        self.verticalLayout.addWidget(self.checkBoxAddProjectsWithAdd)
        self.checkBoxOnlyProjectsWithAdd = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxOnlyProjectsWithAdd.setStatusTip("")
        self.checkBoxOnlyProjectsWithAdd.setWhatsThis("")
        self.checkBoxOnlyProjectsWithAdd.setAccessibleName("")
        self.checkBoxOnlyProjectsWithAdd.setAccessibleDescription("")
        self.checkBoxOnlyProjectsWithAdd.setText("Оставить только проекты с доп иформацией")
        self.checkBoxOnlyProjectsWithAdd.setChecked(False)
        self.checkBoxOnlyProjectsWithAdd.setObjectName("checkBoxOnlyProjectsWithAdd")
        self.verticalLayout.addWidget(self.checkBoxOnlyProjectsWithAdd)
        self.comboBoxPGroups = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBoxPGroups.setObjectName("comboBoxPGroups")
        self.verticalLayout.addWidget(self.comboBoxPGroups)
        self.checkBoxSelectUsers = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxSelectUsers.setStatusTip("")
        self.checkBoxSelectUsers.setWhatsThis("")
        self.checkBoxSelectUsers.setAccessibleName("")
        self.checkBoxSelectUsers.setAccessibleDescription("")
        self.checkBoxSelectUsers.setText("Выбрать только людей из группы")
        self.checkBoxSelectUsers.setObjectName("checkBoxSelectUsers")
        self.verticalLayout.addWidget(self.checkBoxSelectUsers)
        self.comboBoxSelectUsers = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBoxSelectUsers.setObjectName("comboBoxSelectUsers")
        self.verticalLayout.addWidget(self.comboBoxSelectUsers)
        self.checkBoxDeleteWithoutFact = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxDeleteWithoutFact.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxDeleteWithoutFact.sizePolicy().hasHeightForWidth())
        self.checkBoxDeleteWithoutFact.setSizePolicy(sizePolicy)
        self.checkBoxDeleteWithoutFact.setStatusTip("")
        self.checkBoxDeleteWithoutFact.setWhatsThis("")
        self.checkBoxDeleteWithoutFact.setAccessibleName("")
        self.checkBoxDeleteWithoutFact.setAccessibleDescription("")
        self.checkBoxDeleteWithoutFact.setText("Удалить строки с нулевым фактом")
        self.checkBoxDeleteWithoutFact.setChecked(True)
        self.checkBoxDeleteWithoutFact.setObjectName("checkBoxDeleteWithoutFact")
        self.verticalLayout.addWidget(self.checkBoxDeleteWithoutFact)
        self.checkBoxDelPDn = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxDelPDn.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxDelPDn.sizePolicy().hasHeightForWidth())
        self.checkBoxDelPDn.setSizePolicy(sizePolicy)
        self.checkBoxDelPDn.setStatusTip("")
        self.checkBoxDelPDn.setWhatsThis("")
        self.checkBoxDelPDn.setAccessibleName("")
        self.checkBoxDelPDn.setAccessibleDescription("")
        self.checkBoxDelPDn.setText("Удалить проекты с ПерсДанными")
        self.checkBoxDelPDn.setChecked(True)
        self.checkBoxDelPDn.setObjectName("checkBoxDelPDn")
        self.verticalLayout.addWidget(self.checkBoxDelPDn)
        self.checkBoxDeleteVac = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxDeleteVac.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxDeleteVac.sizePolicy().hasHeightForWidth())
        self.checkBoxDeleteVac.setSizePolicy(sizePolicy)
        self.checkBoxDeleteVac.setStatusTip("")
        self.checkBoxDeleteVac.setWhatsThis("")
        self.checkBoxDeleteVac.setAccessibleName("")
        self.checkBoxDeleteVac.setAccessibleDescription("")
        self.checkBoxDeleteVac.setText("Удалить данные о вакансиях из отчёта")
        self.checkBoxDeleteVac.setChecked(True)
        self.checkBoxDeleteVac.setObjectName("checkBoxDeleteVac")
        self.verticalLayout.addWidget(self.checkBoxDeleteVac)
        self.checkBoxAddVFTE = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxAddVFTE.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxAddVFTE.sizePolicy().hasHeightForWidth())
        self.checkBoxAddVFTE.setSizePolicy(sizePolicy)
        self.checkBoxAddVFTE.setStatusTip("")
        self.checkBoxAddVFTE.setWhatsThis("")
        self.checkBoxAddVFTE.setAccessibleName("")
        self.checkBoxAddVFTE.setAccessibleDescription("")
        self.checkBoxAddVFTE.setText("Добавить к данным искусственные FTE")
        self.checkBoxAddVFTE.setChecked(True)
        self.checkBoxAddVFTE.setObjectName("checkBoxAddVFTE")
        self.verticalLayout.addWidget(self.checkBoxAddVFTE)
        self.checkBoxSaveWithOutFotmulas = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxSaveWithOutFotmulas.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxSaveWithOutFotmulas.sizePolicy().hasHeightForWidth())
        self.checkBoxSaveWithOutFotmulas.setSizePolicy(sizePolicy)
        self.checkBoxSaveWithOutFotmulas.setStatusTip("")
        self.checkBoxSaveWithOutFotmulas.setWhatsThis("")
        self.checkBoxSaveWithOutFotmulas.setAccessibleName("")
        self.checkBoxSaveWithOutFotmulas.setAccessibleDescription("")
        self.checkBoxSaveWithOutFotmulas.setText("Сохранить только значения (без формул)")
        self.checkBoxSaveWithOutFotmulas.setChecked(True)
        self.checkBoxSaveWithOutFotmulas.setObjectName("checkBoxSaveWithOutFotmulas")
        self.verticalLayout.addWidget(self.checkBoxSaveWithOutFotmulas)
        self.checkBoxDelRawData = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxDelRawData.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxDelRawData.sizePolicy().hasHeightForWidth())
        self.checkBoxDelRawData.setSizePolicy(sizePolicy)
        self.checkBoxDelRawData.setStatusTip("")
        self.checkBoxDelRawData.setWhatsThis("")
        self.checkBoxDelRawData.setAccessibleName("")
        self.checkBoxDelRawData.setAccessibleDescription("")
        self.checkBoxDelRawData.setText("Удалить лист с данными в файле отчета")
        self.checkBoxDelRawData.setChecked(True)
        self.checkBoxDelRawData.setObjectName("checkBoxDelRawData")
        self.verticalLayout.addWidget(self.checkBoxDelRawData)
        self.checkBoxOpenExcel = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBoxOpenExcel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBoxOpenExcel.sizePolicy().hasHeightForWidth())
        self.checkBoxOpenExcel.setSizePolicy(sizePolicy)
        self.checkBoxOpenExcel.setStatusTip("")
        self.checkBoxOpenExcel.setWhatsThis("")
        self.checkBoxOpenExcel.setAccessibleName("")
        self.checkBoxOpenExcel.setAccessibleDescription("")
        self.checkBoxOpenExcel.setText("Сразу открыть в Excel полученный отчет")
        self.checkBoxOpenExcel.setChecked(True)
        self.checkBoxOpenExcel.setObjectName("checkBoxOpenExcel")
        self.verticalLayout.addWidget(self.checkBoxOpenExcel)
        self.line = QtWidgets.QFrame(self.layoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.pushButtonDoIt = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButtonDoIt.setEnabled(True)
        self.pushButtonDoIt.setMinimumSize(QtCore.QSize(200, 30))
        self.pushButtonDoIt.setStatusTip("")
        self.pushButtonDoIt.setWhatsThis("")
        self.pushButtonDoIt.setAccessibleName("")
        self.pushButtonDoIt.setAccessibleDescription("")
        self.pushButtonDoIt.setText("Сформировать (F3)")
        self.pushButtonDoIt.setAutoDefault(False)
        self.pushButtonDoIt.setFlat(False)
        self.pushButtonDoIt.setObjectName("pushButtonDoIt")
        self.verticalLayout.addWidget(self.pushButtonDoIt)
        self.leftBox.addLayout(self.verticalLayout)
        self.layoutWidget3 = QtWidgets.QWidget(self.VerticalSplitter)
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.rightBox = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.rightBox.setContentsMargins(0, 0, 0, 0)
        self.rightBox.setSpacing(1)
        self.rightBox.setObjectName("rightBox")
        self.labelProgressStatus = QtWidgets.QLabel(self.layoutWidget3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelProgressStatus.setFont(font)
        self.labelProgressStatus.setStatusTip("")
        self.labelProgressStatus.setWhatsThis("")
        self.labelProgressStatus.setAccessibleName("")
        self.labelProgressStatus.setAccessibleDescription("")
        self.labelProgressStatus.setText("Прогресс выполнения обработки данных и подготовки отчета:")
        self.labelProgressStatus.setTextFormat(QtCore.Qt.AutoText)
        self.labelProgressStatus.setScaledContents(False)
        self.labelProgressStatus.setAlignment(QtCore.Qt.AlignCenter)
        self.labelProgressStatus.setWordWrap(False)
        self.labelProgressStatus.setObjectName("labelProgressStatus")
        self.rightBox.addWidget(self.labelProgressStatus)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.layoutWidget3)
        self.plainTextEdit.setEnabled(True)
        self.plainTextEdit.setMinimumSize(QtCore.QSize(300, 0))
        self.plainTextEdit.setToolTip("Окно для отображения информации о:\n"
" - подготовке отчетов;\n"
" - загрузке и копировании файлов;\n"
" - возникающих ошибках;\n"
" - и т.п.")
        self.plainTextEdit.setStatusTip("")
        self.plainTextEdit.setWhatsThis("")
        self.plainTextEdit.setStyleSheet("color: rgb(0, 0, 0);")
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setPlainText("> Ожидание выбора пользователя.")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.rightBox.addWidget(self.plainTextEdit)
        self.pushButtonOpenLastReport = QtWidgets.QPushButton(self.layoutWidget3)
        self.pushButtonOpenLastReport.setMinimumSize(QtCore.QSize(191, 30))
        self.pushButtonOpenLastReport.setStatusTip("")
        self.pushButtonOpenLastReport.setWhatsThis("")
        self.pushButtonOpenLastReport.setAccessibleName("")
        self.pushButtonOpenLastReport.setAccessibleDescription("")
        self.pushButtonOpenLastReport.setText("Открыть последний сформированный отчет в Excel (F4)")
        self.pushButtonOpenLastReport.setCheckable(False)
        self.pushButtonOpenLastReport.setAutoDefault(False)
        self.pushButtonOpenLastReport.setFlat(False)
        self.pushButtonOpenLastReport.setObjectName("pushButtonOpenLastReport")
        self.rightBox.addWidget(self.pushButtonOpenLastReport)
        self.gridLayout.addWidget(self.VerticalSplitter, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 816, 21))
        self.menuBar.setObjectName("menuBar")
        self.ReportMenu = QtWidgets.QMenu(self.menuBar)
        self.ReportMenu.setToolTip("")
        self.ReportMenu.setStatusTip("Меню \'Отчёты\'")
        self.ReportMenu.setWhatsThis("")
        self.ReportMenu.setAccessibleName("")
        self.ReportMenu.setAccessibleDescription("")
        self.ReportMenu.setTitle("Отчёты")
        self.ReportMenu.setObjectName("ReportMenu")
        self.DataMenu = QtWidgets.QMenu(self.menuBar)
        self.DataMenu.setStatusTip("Меню \'Данные\'")
        self.DataMenu.setWhatsThis("")
        self.DataMenu.setAccessibleName("")
        self.DataMenu.setAccessibleDescription("")
        self.DataMenu.setTitle("Данные")
        self.DataMenu.setObjectName("DataMenu")
        self.EditSettingsFiles = QtWidgets.QMenu(self.menuBar)
        self.EditSettingsFiles.setStatusTip("Меню \'Редактирование\'")
        self.EditSettingsFiles.setWhatsThis("")
        self.EditSettingsFiles.setAccessibleName("")
        self.EditSettingsFiles.setAccessibleDescription("")
        self.EditSettingsFiles.setTitle("Редактирование")
        self.EditSettingsFiles.setObjectName("EditSettingsFiles")
        self.UCostsSelector = QtWidgets.QMenu(self.EditSettingsFiles)
        self.UCostsSelector.setToolTip("")
        self.UCostsSelector.setStatusTip("Сотрудники и их часовые ставки")
        self.UCostsSelector.setWhatsThis("")
        self.UCostsSelector.setAccessibleName("")
        self.UCostsSelector.setAccessibleDescription("")
        self.UCostsSelector.setTitle("Сотрудники и их часовые ставки")
        self.UCostsSelector.setObjectName("UCostsSelector")
        self.ProjectsAddInfoSelector = QtWidgets.QMenu(self.EditSettingsFiles)
        self.ProjectsAddInfoSelector.setTitle("Дополнительная информация о контрактах")
        self.ProjectsAddInfoSelector.setObjectName("ProjectsAddInfoSelector")
        self.EMailsSelector = QtWidgets.QMenu(self.EditSettingsFiles)
        self.EMailsSelector.setTitle("Адреса электронной почты")
        self.EMailsSelector.setObjectName("EMailsSelector")
        self.Automation = QtWidgets.QMenu(self.menuBar)
        self.Automation.setStatusTip("")
        self.Automation.setWhatsThis("")
        self.Automation.setAccessibleName("")
        self.Automation.setAccessibleDescription("")
        self.Automation.setTitle("Автоматизация")
        self.Automation.setObjectName("Automation")
        self.Parameters4DESLM = QtWidgets.QMenu(self.Automation)
        self.Parameters4DESLM.setToolTip("")
        self.Parameters4DESLM.setStatusTip("")
        self.Parameters4DESLM.setWhatsThis("")
        self.Parameters4DESLM.setAccessibleName("")
        self.Parameters4DESLM.setTitle("Параметры запроса данных из DES.LM")
        self.Parameters4DESLM.setObjectName("Parameters4DESLM")
        self.DESLM_Year = QtWidgets.QMenu(self.Parameters4DESLM)
        self.DESLM_Year.setToolTip("")
        self.DESLM_Year.setStatusTip("")
        self.DESLM_Year.setWhatsThis("")
        self.DESLM_Year.setAccessibleName("")
        self.DESLM_Year.setAccessibleDescription("")
        self.DESLM_Year.setTitle("Выбран год:")
        self.DESLM_Year.setObjectName("DESLM_Year")
        self.menu = QtWidgets.QMenu(self.menuBar)
        self.menu.setToolTip("")
        self.menu.setStatusTip("Меню \'Папки\'")
        self.menu.setWhatsThis("")
        self.menu.setAccessibleName("")
        self.menu.setAccessibleDescription("")
        self.menu.setTitle("Папки")
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menuBar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setMaximumSize(QtCore.QSize(16777215, 38))
        self.toolBar.setWindowTitle("toolBar")
        self.toolBar.setToolTip("")
        self.toolBar.setStatusTip("")
        self.toolBar.setWhatsThis("")
        self.toolBar.setAccessibleName("")
        self.toolBar.setAccessibleDescription("")
        self.toolBar.setMovable(False)
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBar.setFloatable(False)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBarRocket = QtWidgets.QToolBar(MainWindow)
        self.toolBarRocket.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.toolBarRocket.setWindowTitle("toolBar_2")
        self.toolBarRocket.setToolTip("")
        self.toolBarRocket.setStatusTip("")
        self.toolBarRocket.setWhatsThis("")
        self.toolBarRocket.setAccessibleName("")
        self.toolBarRocket.setAccessibleDescription("")
        self.toolBarRocket.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.toolBarRocket.setMovable(False)
        self.toolBarRocket.setAllowedAreas(QtCore.Qt.RightToolBarArea)
        self.toolBarRocket.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBarRocket.setFloatable(False)
        self.toolBarRocket.setObjectName("toolBarRocket")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBarRocket)
        self.CreateReport = QtWidgets.QAction(MainWindow)
        self.CreateReport.setText("Сформировать новый отчёт на основе выделенного шаблона")
        self.CreateReport.setIconText("Сформировать новый отчёт на основе выделенного шаблона")
        self.CreateReport.setToolTip("Сформировать новый отчёт\n"
"на основе выделенного шаблона")
        self.CreateReport.setStatusTip("Сформировать новый отчёт на основе выделенного шаблона")
        self.CreateReport.setWhatsThis("")
        self.CreateReport.setShortcut("F3")
        self.CreateReport.setObjectName("CreateReport")
        self.EditReportForm = QtWidgets.QAction(MainWindow)
        self.EditReportForm.setText("Шаблон отчёта")
        self.EditReportForm.setIconText("Шаблон отчёта")
        self.EditReportForm.setToolTip("Редактировать выделенный\n"
"шаблон отчёта")
        self.EditReportForm.setStatusTip("Редактировать шаблон отчёта")
        self.EditReportForm.setWhatsThis("")
        self.EditReportForm.setShortcut("Alt+T")
        self.EditReportForm.setObjectName("EditReportForm")
        self.EditRawFile = QtWidgets.QAction(MainWindow)
        self.EditRawFile.setText("Файл с данными")
        self.EditRawFile.setIconText("Файл с данными")
        self.EditRawFile.setToolTip("Редактировать выделенный\n"
"файл с данными")
        self.EditRawFile.setStatusTip("Редактировать файл с данными")
        self.EditRawFile.setWhatsThis("")
        self.EditRawFile.setShortcut("Alt+D")
        self.EditRawFile.setObjectName("EditRawFile")
        self.OpenLastReport = QtWidgets.QAction(MainWindow)
        self.OpenLastReport.setText("Открыть последний сформированный отчёт")
        self.OpenLastReport.setIconText("Открыть последний сформированный отчёт")
        self.OpenLastReport.setToolTip("Открыть последний сформированный отчёт")
        self.OpenLastReport.setStatusTip("Открыть последний сформированный отчёт")
        self.OpenLastReport.setWhatsThis("")
        self.OpenLastReport.setShortcut("F4")
        self.OpenLastReport.setObjectName("OpenLastReport")
        self.Exit = QtWidgets.QAction(MainWindow)
        self.Exit.setText("Выход")
        self.Exit.setToolTip("Завершить работу\n"
"с программой")
        self.Exit.setStatusTip("Завершить работу с программой")
        self.Exit.setWhatsThis("")
        self.Exit.setObjectName("Exit")
        self.OpenDownLoads = QtWidgets.QAction(MainWindow)
        self.OpenDownLoads.setText("Загрузки")
        self.OpenDownLoads.setIconText("Загрузки")
        self.OpenDownLoads.setToolTip("Загрузки")
        self.OpenDownLoads.setStatusTip("Открыть пользовательскую папку \'Загрузки\'")
        self.OpenDownLoads.setWhatsThis("")
        self.OpenDownLoads.setShortcut("Ctrl+1")
        self.OpenDownLoads.setObjectName("OpenDownLoads")
        self.GetLastFileFromDownLoads = QtWidgets.QAction(MainWindow)
        self.GetLastFileFromDownLoads.setEnabled(True)
        self.GetLastFileFromDownLoads.setText("Получить последний xlsx-файл из папки \'Загрузки\'")
        self.GetLastFileFromDownLoads.setIconText("Получить последний xlsx-файл из папки \'Загрузки\'")
        self.GetLastFileFromDownLoads.setToolTip("Получить последний xlsx-файл из папки \'Загрузки\'")
        self.GetLastFileFromDownLoads.setStatusTip("Получить последний xlsx-файл из папки \'Загрузки\'")
        self.GetLastFileFromDownLoads.setWhatsThis("")
        self.GetLastFileFromDownLoads.setShortcut("F5")
        self.GetLastFileFromDownLoads.setObjectName("GetLastFileFromDownLoads")
        self.OpenSavedReportsFolder = QtWidgets.QAction(MainWindow)
        self.OpenSavedReportsFolder.setEnabled(True)
        self.OpenSavedReportsFolder.setText("Сохранённые отчёты")
        self.OpenSavedReportsFolder.setIconText("Сохранённые отчёты")
        self.OpenSavedReportsFolder.setToolTip("Сохранённые отчёты")
        self.OpenSavedReportsFolder.setStatusTip("Открыть папку с сохранёнными отчётами")
        self.OpenSavedReportsFolder.setWhatsThis("")
        self.OpenSavedReportsFolder.setShortcut("Ctrl+3")
        self.OpenSavedReportsFolder.setObjectName("OpenSavedReportsFolder")
        self.MoveRawFile2Archive = QtWidgets.QAction(MainWindow)
        self.MoveRawFile2Archive.setEnabled(True)
        self.MoveRawFile2Archive.setText("Переместить выделенный файл с данными в архив")
        self.MoveRawFile2Archive.setIconText("Переместить выделенный файл с данными в архив")
        self.MoveRawFile2Archive.setToolTip("Переместить выделенный\n"
"файл с данными в архив")
        self.MoveRawFile2Archive.setStatusTip("Переместить выделенный файл с данными в архив")
        self.MoveRawFile2Archive.setWhatsThis("")
        self.MoveRawFile2Archive.setShortcut("F6")
        self.MoveRawFile2Archive.setObjectName("MoveRawFile2Archive")
        self.WHours = QtWidgets.QAction(MainWindow)
        self.WHours.setText("Рабочие часы в месяцах")
        self.WHours.setIconText("Рабочие часы в месяцах")
        self.WHours.setToolTip("Рабочие часы в месяцах")
        self.WHours.setStatusTip("Редактировать таблицу с рабочими часами помесячно")
        self.WHours.setWhatsThis("")
        self.WHours.setShortcut("")
        self.WHours.setObjectName("WHours")
        self.ShortDivisionNames = QtWidgets.QAction(MainWindow)
        self.ShortDivisionNames.setText("Наименования подразделений")
        self.ShortDivisionNames.setIconText("Наименования подразделений")
        self.ShortDivisionNames.setToolTip("Наименования подразделений")
        self.ShortDivisionNames.setStatusTip("Редактирование наименований подразделений")
        self.ShortDivisionNames.setShortcut("")
        self.ShortDivisionNames.setObjectName("ShortDivisionNames")
        self.ShortFNNames = QtWidgets.QAction(MainWindow)
        self.ShortFNNames.setText("Наименования функциональных направлений")
        self.ShortFNNames.setIconText("Наименования функциональных направлений")
        self.ShortFNNames.setToolTip("Наименования функциональных направлений")
        self.ShortFNNames.setStatusTip("Редактирование наименований функциональных направлений")
        self.ShortFNNames.setShortcut("")
        self.ShortFNNames.setObjectName("ShortFNNames")
        self.FNSusbst = QtWidgets.QAction(MainWindow)
        self.FNSusbst.setText("Принадлежность проектов функциональным направлениям")
        self.FNSusbst.setIconText("Принадлежность проектов функциональным направлениям")
        self.FNSusbst.setToolTip("Принадлежность проектов функциональным направлениям")
        self.FNSusbst.setStatusTip("Редактирование подстановок функциональных направлений для отдельных проектов")
        self.FNSusbst.setShortcut("")
        self.FNSusbst.setObjectName("FNSusbst")
        self.ProjectsSubTypes = QtWidgets.QAction(MainWindow)
        self.ProjectsSubTypes.setText("Подтипы проектов")
        self.ProjectsSubTypes.setIconText("Подтипы проектов")
        self.ProjectsSubTypes.setToolTip("Подтипы проектов")
        self.ProjectsSubTypes.setStatusTip("Редактирование подтипов проектов")
        self.ProjectsSubTypes.setShortcut("")
        self.ProjectsSubTypes.setObjectName("ProjectsSubTypes")
        self.ProjectsTypesDescriptions = QtWidgets.QAction(MainWindow)
        self.ProjectsTypesDescriptions.setText("Расшифровки типов (букв) проектов")
        self.ProjectsTypesDescriptions.setIconText("Расшифровки типов (букв) проектов")
        self.ProjectsTypesDescriptions.setToolTip("Расшифровки типов (букв) проектов")
        self.ProjectsTypesDescriptions.setStatusTip("Редактирование расшифровки типов (букв) проектов")
        self.ProjectsTypesDescriptions.setShortcut("")
        self.ProjectsTypesDescriptions.setObjectName("ProjectsTypesDescriptions")
        self.ProjectsSubTypesDescriptions = QtWidgets.QAction(MainWindow)
        self.ProjectsSubTypesDescriptions.setText("Расшифровки подтипов проектов")
        self.ProjectsSubTypesDescriptions.setIconText("Расшифровки подтипов проектов")
        self.ProjectsSubTypesDescriptions.setToolTip("Расшифровки подтипов проектов")
        self.ProjectsSubTypesDescriptions.setStatusTip("Редактирование расшифровок подтипов проектов")
        self.ProjectsSubTypesDescriptions.setShortcut("")
        self.ProjectsSubTypesDescriptions.setObjectName("ProjectsSubTypesDescriptions")
        self.VIP = QtWidgets.QAction(MainWindow)
        self.VIP.setText("Список VIP - исключаемые из отчетов")
        self.VIP.setIconText("Список VIP - исключаемые из отчетов")
        self.VIP.setToolTip("Список VIP - исключаемые из отчетов")
        self.VIP.setStatusTip("Список VIP - исключаемые из отчетов")
        self.VIP.setObjectName("VIP")
        self.BProg = QtWidgets.QAction(MainWindow)
        self.BProg.setText("Портфели проектов")
        self.BProg.setIconText("Портфели проектов")
        self.BProg.setToolTip("Портфели проектов")
        self.BProg.setStatusTip("Редактирование портфелей проектов")
        self.BProg.setShortcut("")
        self.BProg.setObjectName("BProg")
        self.CrossingIS = QtWidgets.QAction(MainWindow)
        self.CrossingIS.setText("Наименования ИС из контракта")
        self.CrossingIS.setIconText("Наименования ИС из контракта")
        self.CrossingIS.setToolTip("Наименования ИС из контракта")
        self.CrossingIS.setStatusTip("")
        self.CrossingIS.setShortcut("")
        self.CrossingIS.setObjectName("CrossingIS")
        self.Settings = QtWidgets.QAction(MainWindow)
        self.Settings.setText("Файл с общими настройками программы")
        self.Settings.setIconText("Файл с общими настройками программы")
        self.Settings.setToolTip("Редактировать файл\n"
"с общими настройками\n"
"программы")
        self.Settings.setStatusTip("Редактировать файл с общими настройками программы")
        self.Settings.setWhatsThis("")
        self.Settings.setShortcut("")
        self.Settings.setObjectName("Settings")
        self.WaitFileAndCreateReport = QtWidgets.QAction(MainWindow)
        self.WaitFileAndCreateReport.setEnabled(True)
        self.WaitFileAndCreateReport.setText("Дождаться новый файл в папке \'Загрузки\' и сформировать отчёт")
        self.WaitFileAndCreateReport.setIconText("Дождаться новый файл в папке \'Загрузки\' и сформировать отчёт")
        self.WaitFileAndCreateReport.setToolTip("Дождаться новый файл в папке \'Загрузки\' и сформировать отчёт")
        self.WaitFileAndCreateReport.setStatusTip("Сформировать отчёт с новым файлом, который появится в папке \'Загрузки\'")
        self.WaitFileAndCreateReport.setWhatsThis("")
        self.WaitFileAndCreateReport.setShortcut("F7")
        self.WaitFileAndCreateReport.setObjectName("WaitFileAndCreateReport")
        self.UserUCosts = QtWidgets.QAction(MainWindow)
        self.UserUCosts.setText("Пользовательские")
        self.UserUCosts.setIconText("Пользовательские")
        self.UserUCosts.setToolTip("Пользовательские")
        self.UserUCosts.setStatusTip("Сотрудники и часовые ставки - пользовательские настройки")
        self.UserUCosts.setWhatsThis("")
        self.UserUCosts.setShortcut("")
        self.UserUCosts.setObjectName("UserUCosts")
        self.SystemUCosts = QtWidgets.QAction(MainWindow)
        self.SystemUCosts.setText("Общие настройки")
        self.SystemUCosts.setIconText("Общие настройки")
        self.SystemUCosts.setToolTip("Общие настройки")
        self.SystemUCosts.setStatusTip("Сотрудники и часовые ставки - общие настройки программы")
        self.SystemUCosts.setWhatsThis("")
        self.SystemUCosts.setShortcut("")
        self.SystemUCosts.setObjectName("SystemUCosts")
        self.UCostsSwitcher = QtWidgets.QAction(MainWindow)
        self.UCostsSwitcher.setText("Отключить пользовательские данные")
        self.UCostsSwitcher.setIconText("Отключить пользовательские данные")
        self.UCostsSwitcher.setToolTip("Отключить пользовательские данные")
        self.UCostsSwitcher.setStatusTip("Переключение между программными и пользовательскими настройками")
        self.UCostsSwitcher.setWhatsThis("")
        self.UCostsSwitcher.setShortcut("")
        self.UCostsSwitcher.setObjectName("UCostsSwitcher")
        self.UserProjectsAddInfo = QtWidgets.QAction(MainWindow)
        self.UserProjectsAddInfo.setText("Пользовательские")
        self.UserProjectsAddInfo.setIconText("Пользовательские")
        self.UserProjectsAddInfo.setToolTip("Пользовательские")
        self.UserProjectsAddInfo.setStatusTip("Дополнительная информация - пользовательские настройки")
        self.UserProjectsAddInfo.setShortcut("")
        self.UserProjectsAddInfo.setObjectName("UserProjectsAddInfo")
        self.ProjectsAddInfoSwitcher = QtWidgets.QAction(MainWindow)
        self.ProjectsAddInfoSwitcher.setText("Отключить пользовательские данные")
        self.ProjectsAddInfoSwitcher.setIconText("Отключить пользовательские данные")
        self.ProjectsAddInfoSwitcher.setToolTip("Отключить пользовательские данные")
        self.ProjectsAddInfoSwitcher.setStatusTip("Переключение между программными и пользовательскими настройками")
        self.ProjectsAddInfoSwitcher.setShortcut("")
        self.ProjectsAddInfoSwitcher.setObjectName("ProjectsAddInfoSwitcher")
        self.SystemProjectsAddInfo = QtWidgets.QAction(MainWindow)
        self.SystemProjectsAddInfo.setText("Общие настройки")
        self.SystemProjectsAddInfo.setIconText("Общие настройки")
        self.SystemProjectsAddInfo.setToolTip("Общие настройки")
        self.SystemProjectsAddInfo.setStatusTip("Дополнительная информация - общие настройки программы")
        self.SystemProjectsAddInfo.setShortcut("")
        self.SystemProjectsAddInfo.setObjectName("SystemProjectsAddInfo")
        self.UserEMails = QtWidgets.QAction(MainWindow)
        self.UserEMails.setText("Пользовательский")
        self.UserEMails.setIconText("Пользовательский")
        self.UserEMails.setToolTip("Пользовательский")
        self.UserEMails.setStatusTip("Адреса электронной почты - пользовательские списки")
        self.UserEMails.setShortcut("")
        self.UserEMails.setObjectName("UserEMails")
        self.SystemEMails = QtWidgets.QAction(MainWindow)
        self.SystemEMails.setText("Общий список")
        self.SystemEMails.setIconText("Общий список")
        self.SystemEMails.setToolTip("Общий список")
        self.SystemEMails.setStatusTip("Адреса электронной почты - общие списки программы")
        self.SystemEMails.setShortcut("")
        self.SystemEMails.setObjectName("SystemEMails")
        self.EMailsSwitcher = QtWidgets.QAction(MainWindow)
        self.EMailsSwitcher.setText("Отключить пользовательский список")
        self.EMailsSwitcher.setIconText("Отключить пользовательский список")
        self.EMailsSwitcher.setToolTip("Отключить пользовательский список")
        self.EMailsSwitcher.setStatusTip("Переключение между программными и пользовательскими списками")
        self.EMailsSwitcher.setShortcut("")
        self.EMailsSwitcher.setObjectName("EMailsSwitcher")
        self.OpenUserFilesFolder = QtWidgets.QAction(MainWindow)
        self.OpenUserFilesFolder.setText("Пользовательске файлы")
        self.OpenUserFilesFolder.setIconText("Пользовательске файлы")
        self.OpenUserFilesFolder.setToolTip("Пользовательске файлы")
        self.OpenUserFilesFolder.setStatusTip("Открыть папку с пользовательскими файлами")
        self.OpenUserFilesFolder.setWhatsThis("")
        self.OpenUserFilesFolder.setShortcut("Ctrl+2")
        self.OpenUserFilesFolder.setObjectName("OpenUserFilesFolder")
        self.StopWaitingFile = QtWidgets.QAction(MainWindow)
        self.StopWaitingFile.setEnabled(False)
        self.StopWaitingFile.setText("Прекратить ожидание данных")
        self.StopWaitingFile.setIconText("Прекратить ожидание данных")
        self.StopWaitingFile.setToolTip("Прекратить ожидание файла в папке \'Загрузки\' или из Интернет")
        self.StopWaitingFile.setStatusTip("Прекратить ожидание файла в папке \'Загрузки\' или из Интернет")
        self.StopWaitingFile.setWhatsThis("")
        self.StopWaitingFile.setShortcut("F7")
        self.StopWaitingFile.setObjectName("StopWaitingFile")
        self.LoadDataFromDESLM = QtWidgets.QAction(MainWindow)
        self.LoadDataFromDESLM.setEnabled(False)
        self.LoadDataFromDESLM.setText("Загрузить данные из DES.LM в папку \'Загрузки\'")
        self.LoadDataFromDESLM.setIconText("Загрузить данные из DES.LM в папку \'Загрузки\'")
        self.LoadDataFromDESLM.setToolTip("Начать загрузку данных из DES.LM через Интернет и сохранить в папке \'Загрузки\'")
        self.LoadDataFromDESLM.setStatusTip("Начать загрузку данных из DES.LM через Интернет и сохранить в папке \'Загрузки\'")
        self.LoadDataFromDESLM.setWhatsThis("")
        self.LoadDataFromDESLM.setShortcut("Alt+F8")
        self.LoadDataFromDESLM.setObjectName("LoadDataFromDESLM")
        self.LoadFromDELMAndCreateReport = QtWidgets.QAction(MainWindow)
        self.LoadFromDELMAndCreateReport.setEnabled(False)
        self.LoadFromDELMAndCreateReport.setText("Загрузить данные из DES.LM и сформировать отчёт")
        self.LoadFromDELMAndCreateReport.setIconText("Загрузить данные из DES.LM и сформировать отчёт")
        self.LoadFromDELMAndCreateReport.setToolTip("Конвейер:\n"
" - загрузить данные из DES.LM\n"
" - проверить полученный файл\n"
" - скопировать\n"
" - сформировать из него отчёт")
        self.LoadFromDELMAndCreateReport.setStatusTip("Загрузить данные из DES.LM через Интернет и на основании них сформировать отчёт по выделенной форме")
        self.LoadFromDELMAndCreateReport.setWhatsThis("")
        self.LoadFromDELMAndCreateReport.setShortcut("Ctrl+F8")
        self.LoadFromDELMAndCreateReport.setObjectName("LoadFromDELMAndCreateReport")
        self.GetUserCode = QtWidgets.QAction(MainWindow)
        self.GetUserCode.setEnabled(True)
        self.GetUserCode.setText("Пользовательский код:")
        self.GetUserCode.setToolTip("Скопировать пользовательский код в буфер обмена")
        self.GetUserCode.setStatusTip("Скопировать пользовательский код в буфер обмена")
        self.GetUserCode.setWhatsThis("")
        self.GetUserCode.setObjectName("GetUserCode")
        self.OpenRawDataFolder = QtWidgets.QAction(MainWindow)
        self.OpenRawDataFolder.setText("\'Сырые\' данные из DES.LM")
        self.OpenRawDataFolder.setIconText("\'Сырые\' данные из DES.LM")
        self.OpenRawDataFolder.setToolTip("\'Сырые\' данные из DES.LM")
        self.OpenRawDataFolder.setStatusTip("Открыть папку с \'cырыми\' данными из DES.LM")
        self.OpenRawDataFolder.setWhatsThis("")
        self.OpenRawDataFolder.setShortcut("Ctrl+4")
        self.OpenRawDataFolder.setObjectName("OpenRawDataFolder")
        self.ReportMenu.addAction(self.CreateReport)
        self.ReportMenu.addAction(self.OpenLastReport)
        self.ReportMenu.addSeparator()
        self.ReportMenu.addAction(self.Exit)
        self.DataMenu.addAction(self.GetLastFileFromDownLoads)
        self.DataMenu.addSeparator()
        self.DataMenu.addAction(self.MoveRawFile2Archive)
        self.UCostsSelector.addAction(self.SystemUCosts)
        self.UCostsSelector.addAction(self.UserUCosts)
        self.UCostsSelector.addSeparator()
        self.UCostsSelector.addAction(self.UCostsSwitcher)
        self.ProjectsAddInfoSelector.addAction(self.SystemProjectsAddInfo)
        self.ProjectsAddInfoSelector.addAction(self.UserProjectsAddInfo)
        self.ProjectsAddInfoSelector.addSeparator()
        self.ProjectsAddInfoSelector.addAction(self.ProjectsAddInfoSwitcher)
        self.EMailsSelector.addAction(self.SystemEMails)
        self.EMailsSelector.addAction(self.UserEMails)
        self.EMailsSelector.addSeparator()
        self.EMailsSelector.addAction(self.EMailsSwitcher)
        self.EditSettingsFiles.addAction(self.EditReportForm)
        self.EditSettingsFiles.addAction(self.EditRawFile)
        self.EditSettingsFiles.addSeparator()
        self.EditSettingsFiles.addAction(self.WHours)
        self.EditSettingsFiles.addAction(self.UCostsSelector.menuAction())
        self.EditSettingsFiles.addSeparator()
        self.EditSettingsFiles.addAction(self.ShortDivisionNames)
        self.EditSettingsFiles.addAction(self.ShortFNNames)
        self.EditSettingsFiles.addSeparator()
        self.EditSettingsFiles.addAction(self.ProjectsSubTypes)
        self.EditSettingsFiles.addAction(self.ProjectsTypesDescriptions)
        self.EditSettingsFiles.addAction(self.ProjectsSubTypesDescriptions)
        self.EditSettingsFiles.addAction(self.BProg)
        self.EditSettingsFiles.addAction(self.FNSusbst)
        self.EditSettingsFiles.addAction(self.ProjectsAddInfoSelector.menuAction())
        self.EditSettingsFiles.addSeparator()
        self.EditSettingsFiles.addAction(self.EMailsSelector.menuAction())
        self.EditSettingsFiles.addAction(self.CrossingIS)
        self.EditSettingsFiles.addAction(self.VIP)
        self.EditSettingsFiles.addSeparator()
        self.EditSettingsFiles.addAction(self.Settings)
        self.Parameters4DESLM.addAction(self.DESLM_Year.menuAction())
        self.Parameters4DESLM.addSeparator()
        self.Automation.addAction(self.WaitFileAndCreateReport)
        self.Automation.addSeparator()
        self.Automation.addAction(self.Parameters4DESLM.menuAction())
        self.Automation.addAction(self.LoadDataFromDESLM)
        self.Automation.addAction(self.LoadFromDELMAndCreateReport)
        self.Automation.addSeparator()
        self.Automation.addAction(self.StopWaitingFile)
        self.Automation.addSeparator()
        self.Automation.addAction(self.GetUserCode)
        self.menu.addAction(self.OpenDownLoads)
        self.menu.addAction(self.OpenUserFilesFolder)
        self.menu.addAction(self.OpenSavedReportsFolder)
        self.menu.addAction(self.OpenRawDataFolder)
        self.menuBar.addAction(self.ReportMenu.menuAction())
        self.menuBar.addAction(self.DataMenu.menuAction())
        self.menuBar.addAction(self.Automation.menuAction())
        self.menuBar.addAction(self.EditSettingsFiles.menuAction())
        self.menuBar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.listViewReports, self.listViewRawData)
        MainWindow.setTabOrder(self.listViewRawData, self.checkBoxDelPDn)
        MainWindow.setTabOrder(self.checkBoxDelPDn, self.checkBoxDeleteNotProduct)
        MainWindow.setTabOrder(self.checkBoxDeleteNotProduct, self.checkBoxDeleteVac)
        MainWindow.setTabOrder(self.checkBoxDeleteVac, self.checkBoxSaveWithOutFotmulas)
        MainWindow.setTabOrder(self.checkBoxSaveWithOutFotmulas, self.checkBoxAddVFTE)
        MainWindow.setTabOrder(self.checkBoxAddVFTE, self.plainTextEdit)
        MainWindow.setTabOrder(self.plainTextEdit, self.pushButtonDoIt)
        MainWindow.setTabOrder(self.pushButtonDoIt, self.checkBoxDelRawData)
        MainWindow.setTabOrder(self.checkBoxDelRawData, self.checkBoxOpenExcel)
        MainWindow.setTabOrder(self.checkBoxOpenExcel, self.pushButtonOpenLastReport)

    def retranslateUi(self, MainWindow):
        pass


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
